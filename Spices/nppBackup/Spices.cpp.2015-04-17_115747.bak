#include "mbed.h"

#include "Spices.h"
#include "common.h"
#include "TFC.h"

// camera params
#define NUM_LINE_SCAN	128
#define MAX_LINE_SCAN 	NUM_LINE_SCAN-1
#define MIN_LINE_WIDTH	0							//CHANGE: minimum line width
#define MAX_LINE_WIDTH	15							//CHANGE: maximum line width
#define FILTER_ENDS 	0							// # of pixels at end of camera data to ignore; set to 0 for now, later make 15
#define RANGE (NUM_LINE_SCAN - (2 * FILTER_ENDS))	// range of camera pixels to consider
#define ERR_RATIO 		0.85						// ratio of max possible error to pixels (have to measure!)
#define DER_RATIO 		0.75						// ratio for der threshold level (was 0.5 initially, may put back)

// steer/servo params
#define MAX_STEER_LEFT -0.51						// value determined by demo mode 1 measure (have to be adjusted with every servo horn attach)
#define MAX_STEER_RIGHT 0.39						// value determined by demo mode 1 measure
#define DT 				0.02						// # MS of time between intervals (doesn't really matter)

// logging parameters
#define NUM_LOG_FRAMES 	700							// # of frames to log (when logging active) ~14 sec worth!

// ******	for debug tuning	******
#define TUNE_SPEED 		0.7
#define TUNE_KP 		0.008
#define TUNE_KI 		0
#define TUNE_KD 		0
#define MIN_POWER 		60							// percent min power (estimating for a 2-ft turn => 24" / (24" + 6" car) = 4/5; speed of inner wheel is 20% lower worst case
#define SPEED_ADJUST 	4
#define ABS_ERROR_THRESH 10							// number of pixels line position offset before changing KP value
#define CONTROL_METHOD 	2							// which control method to use

// Drive/motor params
// 0.4 way too slow!!	need to charge battery
#define SUB_LIGHT_SPEED 0.5							// moderate speed (value 0 to 1 sent to motors)
#define LIGHT_SPEED 	0.6								// fast...
#define RIDICULOUS_SPEED 0.7						// faster...
#define LUDICROUS_SPEED 0.9							// faster still!
#define MAX_POWER 		100							// percent max power (for speed adjustments)

// algo params
#define UNKNOWN_COUNT_MAX	50						// max value to allow for unknown track conditions before killing engine
#define STARTGATEFOUNDMAX	0						// max value to allow for finding starting gate before killing engine
#define STARTGATEDELAY		50						// Delay before searching for starting gate to kill engine

#define MMA8451_I2C_ADDRESS (0x1d<<1)				// address for accelerometer?

// image processing cars
uint16_t	GrabLineScanImage0[NUM_LINE_SCAN];		// snapshot of camera data for this 'frame'
uint16_t	GrabLineScanImage1[NUM_LINE_SCAN];		// snapshot of camera data for this 'frame'
float		DerivLineScanImage0[NUM_LINE_SCAN];		// derivative of line scan data
float		NegEdges[NUM_LINE_SCAN];				// array-- set of where in line scan data negative edges found
float		PosEdges[NUM_LINE_SCAN];				// array-- set of where in line scan data positive edges found
uint16_t	numNegEdges = 0, numPosEdges = 0, numEdges = 0;		// max value of valid neg and positive indices (also serves as a count of # edges found)
uint16_t	LastNegEdges, LastPosEdges;
uint16_t	MaxLightIntensity = 0;					// max measured light intensity -- to account for lighting differences
uint16_t	MinLightIntensity = (1 << 12);			// min measured light intensity -- to account for lighting differences
float		maxDerVal = 0;							// max deriv value
float		minDerVal = (float) (1 << 12);			// min deriv value
float		aveDerVal = 0;							// average deriv value
float		DerivThreshold = 512;					// CHANGE: Derivative Threshold (default)
float		PosDerivThreshold = (1 << 9);			// Pos Edge Derivative Threshold (default)
float		NegDerivThreshold = (1 << 9);			// Neg Edge Derivative Threshold (default)
int			center_pixel = 63;			// CHANGE: Center pixel

// Steering control variables
float		CurrentLinePosition[NUM_LINE_SCAN];					// Current position of track line (in pixels -- 0 to 127)
float		LastLinePosition[NUM_LINE_SCAN];						// Last position of track line (in pixels -- 0 to 127)
float		CurrentLinePosError = 0;				// Current line position error (used for derivative calc)
float		AbsError;
float		LastLinePosError = 0;					// Last line position error (used for derivative calc)
float		SumLinePosError = 0;					// Sum of line position error (used for integral calc)
float		DerivError = 0;							// Derivative of error
float		CurrentSteerSetting = 0.16;				// CHANGE: drive straight at first
float		CurrentLeftDriveSetting = 0;			// Drive setting (left wheel)
float		CurrentRightDriveSetting = 0;			// Drive setting (right wheel)

// Speed control vars
float			MaxSpeed;							// maximum speed allowed
uint16_t	startRaceTicker;						// ticker at start of race1

// Custom Data Types
typedef enum TrackStatusType 
{
	Unknown,
	LineFound,				//current lines state
	LineFound11,			//if both lines are detected
	LineFound10,			//if both right line is detected
	LineFound01,			//if both left line is detected
	StartGateFound,			
	LineJustLeft
}TrackStatusType;
															
TrackStatusType CurrentTrackStatus;					// current track status
TrackStatusType LastTrackStatus;					// last track status											

struct LogData {
	float linepos;
	float steersetting;
	float leftdrivesetting;
	float rightdrivesetting;
};

LogData		frameLogs[NUM_LOG_FRAMES];				// array of log data to store	
int			logDataIndex;							// index for log data

int			StartGateFoundCount = 0;				// how many times start gate has been found
int			UnknownCount = 0;						// how many times nothing has been found (to help with kill switch implementation)
bool		go = false;								// Car can go!	Should be set to false to start.

// EXTRA CONTROL PARAMETERS
bool debugFakeMode = false;							// if true, ignores real camera and uses fake camera input instead; used for data processing debug
int terminalOutput = 1;								// set debug level for terminal output
													//	0 : no terminal output, race!
													//	1 : terminal output
bool doLogData = false;								// whether to capture log data to output later on
bool killSwitch = false;							// whether to enable Kill Switch (allow engine to stop after not finding track)
bool startGateStop = false;							// whether to stop or not depending on starting gate reading
bool doRisky = false;								// race style-- whether conservative or risky

// timer stuff
//Timer timer;
//int after_time, before_time, start_time, last_start_time;
//bool run_once = false;

void MasterControlProgram()
{																											
	// Every 4s (or Terminal Output is off, i.e. race mode!)
	//	AND line scan image ready (or fake mode where image is always ready)
	//	(ticker updates every 2ms) (Line scan image ready very 20mS?)
	if(TFC_Ticker[0]>100 && TFC_LineScanImageReady>0)
	{
		// stuff that needs to be reset with each image frame
		TFC_Ticker[0] = 0;
		TFC_LineScanImageReady=0; // must reset to 0 after detecting non-zero
		MaxLightIntensity = 0;									// reset
		MinLightIntensity = (1 << 12);					// reset

		// grab camera frame
		grabCameraFrame();
		/*if (terminalOutput == 1) {
			printLineScanData(&GrabLineScanImage0[0]);
		}*/
	
		// calculate derivative of linescandata, filter starttime data
		derivativeLineScan(&GrabLineScanImage0[0], &DerivLineScanImage0[0]);
		if (terminalOutput == 1) {
			printDerivLineScanData(&DerivLineScanImage0[0]);
		}

		/* adjust deriv threshold based on max lighting value
		// has to be called before find edges
		//adjustLights();
		if (terminalOutput == 1) {
			printAdjustLightsData();
		}*/
		
		//find edges from derivative data
		findEdges(&DerivLineScanImage0[0]);
		if (terminalOutput == 1) {
			printEdgesFound();
		}

		//review edge data and set position or starting flag appropriately
		TERMINAL_PRINTF("reviewEdgesON ");
		reviewEdges();
		TERMINAL_PRINTF("reviewEdgesON ");
	
		// test out accelerometer
		// accelTest();
			
		// Update things based on latest track status
		// e.g. change steering setting, stop car, ...
		// and give LED feedback as to track status
		ActOnTrackStatus();
		feedbackLights();
		
		/* control max power (speed)
		SpeedControl();

		// Drive!!		
		Drive();
		
		// wait_ms(1);*/
	} 
}
	
void grabCameraFrame()
{
	uint32_t i = 0;

	for(i=0;i<128;i++) // print one line worth of data (128) from Camera 0
	{ 
		// use real camera data
		GrabLineScanImage0[i] = TFC_LineScanImage0[i];
		//GrabLineScanImage1[i] = TFC_LineScanImage1[i];
	}
}

void printLineScanData(uint16_t* LineScanData)
{
	uint32_t i = 0;
	float Val;

	//TERMINAL_PRINTF("LINE SCAN DATA:,");

	for(i=0;i<NUM_LINE_SCAN;i++) // print one line worth of data (128) from Camera 0
	{ 
		Val = (float) LineScanData[i];
		TERMINAL_PRINTF("%.0f",Val);
			
		if(i==MAX_LINE_SCAN)	// when last data reached put in line return
			TERMINAL_PRINTF("\r\n");
		else
			TERMINAL_PRINTF(",");
	}
}

void derivativeLineScan(uint16_t* LineScanDataIn, float* DerivLineScanDataOut)
{

	uint32_t i, minCnt = 0, maxCnt = 0, sumCnt = 0;;
	//float DerVal, upperDerVal, lowerDerVal = 0;
	
	maxDerVal = 0;
	minDerVal = (float) (1 << 12);
	aveDerVal = 0;
	
	minCnt = FILTER_ENDS;
	maxCnt = NUM_LINE_SCAN - FILTER_ENDS;

	// TERMINAL_PRINTF("i, upperDerVal, lowerDerVal, DerVal\r\n");
	
	for(i=minCnt;i<maxCnt;i++) // print one line worth of data from Camera 0
	{	
		// store max light intensity value
		if (LineScanDataIn[i] > MaxLightIntensity)
			MaxLightIntensity = LineScanDataIn[i];

		// store min light intensity value
		if (LineScanDataIn[i] < MinLightIntensity)
			MinLightIntensity = LineScanDataIn[i];
		
		sumCnt += LineScanDataIn[i];

		/* Central Derivative
		if (i==minCnt) {											// start point
			upperDerVal = (float)(LineScanDataIn[i+1]);
			lowerDerVal = (float)(LineScanDataIn[i]);	// make same as start point
		} else if (i==maxCnt - 1){						// end point
			upperDerVal = (float)(LineScanDataIn[i]);	// make same as end point
			lowerDerVal = (float)(LineScanDataIn[i-1]);
		} 
		else {															// any other point
			upperDerVal = (float)(LineScanDataIn[i+1]);
			lowerDerVal = (float)(LineScanDataIn[i-1]);
		}
		DerVal = (upperDerVal - lowerDerVal) / 2;
		//TERMINAL_PRINTF("%d,%9.3f,%9.3f,%9.3f\r\n", i, upperDerVal, lowerDerVal, DerVal);
						
		if (DerVal > maxDerVal) {
			maxDerVal = DerVal;
		} 
		if (DerVal < minDerVal) {
			minDerVal = DerVal;
		}
		aveDerVal = aveDerVal + DerVal;					//get sum
		DerivLineScanDataOut[i] = DerVal;		
	}
	aveDerVal = (float) aveDerVal / (maxCnt - minCnt);*/
	}
	
	//aveDerVal = (0.75) * ((float) sumCnt / maxCnt);
	aveDerVal = DerivThreshold;
	for(i=minCnt;i<maxCnt;i++) // print one line worth of data from Camera 0
	{
		if((float)LineScanDataIn[i] > aveDerVal)
		{
			DerivLineScanDataOut[i] = 0;
		}
		else if((float)LineScanDataIn[i] < aveDerVal)
		{
			DerivLineScanDataOut[i] = 1;
		}
	}
}

void printDerivLineScanData(float* derivLineScanData)
{
	uint32_t i, minCnt = 0, maxCnt = 0;
	
	minCnt = FILTER_ENDS;
	maxCnt = NUM_LINE_SCAN - FILTER_ENDS;

	//TERMINAL_PRINTF("DERIVATIVE DATA:,");

	for(i=minCnt;i<maxCnt;i++) // print one line worth of data (128) from Camera 0
	{
		TERMINAL_PRINTF("%.0f",derivLineScanData[i]);
		if(i==maxCnt-1)					// when last data reached put in line return
			TERMINAL_PRINTF(" ",derivLineScanData[i]);
			//TERMINAL_PRINTF("\r\n",derivLineScanData[i]);
	}
}

void adjustLights()
{

	///adjust light setting here

	if (terminalOutput == 1) 
	{
		TERMINAL_PRINTF("Max Light Intensity: %4d\r\n", MaxLightIntensity);
		TERMINAL_PRINTF("Min Light Intensity: %4d\r\n", MinLightIntensity);
		TERMINAL_PRINTF("Deriv Threshold: %9.3f\r\n", DerivThreshold);
	}

}

void findEdges(float* derivLineScanData)
{
	// search for edges in deriviative data using a threshold
	// need to store in a hash if that's possible...
	// combine edges that are a pixel apart
 
	int i;
	
	int NegEdgeBufCnt = 0, NegEdgeBufSum = 0;		// serves as buffer to store neg edges found next to each other
	int PosEdgeBufCnt = 0, PosEdgeBufSum = 0;		// serves as buffer to store pos edges found next to each other
	 
	int minCnt = FILTER_ENDS;
	int maxCnt = NUM_LINE_SCAN - FILTER_ENDS;
	
	numNegEdges = 0;						// count of neg edges found thus far
	numPosEdges = 0;						// count of pos edges found thus far
	for(i=minCnt+2;i<maxCnt-2;i++) // print one line worth of data from Camera 0
	{	
		if ((derivLineScanData[i] == 0) && (derivLineScanData[i+1] == 1))			// NEGATIVE EDGE FOUND!
		{
			NegEdgeBufCnt++;							 // add value to neg edge buffer
			NegEdgeBufSum = NegEdgeBufSum + i;
		} 
		else if ((derivLineScanData[i] == 1) && (derivLineScanData[i+1] == 0))		// POSITIVE EDGE FOUND! 
		{	  
			PosEdgeBufCnt++;					 // add value to pos edge buffer
			PosEdgeBufSum = PosEdgeBufSum + i;	
		}  
		else // NO EDGE FOUND
		{						 
			// POP EDGE BUFFERS IF NON-EMPTY AND STORE TO EDGE "STACK" (i.e. edges found)
			if (NegEdgeBufCnt > 0) {
				// store edge value
				NegEdges[numNegEdges] = (float) NegEdgeBufSum / NegEdgeBufCnt;
				numNegEdges++;
				
				// clear edge buffer      
				NegEdgeBufSum = 0; NegEdgeBufCnt = 0;
			}

			if (PosEdgeBufCnt > 0) {
				// store edge value
				PosEdges[numPosEdges] = (float) PosEdgeBufSum / PosEdgeBufCnt;
				numPosEdges++;
				
				// clear edge buffer
				PosEdgeBufSum = 0; PosEdgeBufCnt = 0;
			}        
		}
	}
}

void printEdgesFound()
{
	int i;
  
    // Check that neg edges captured ok
    TERMINAL_PRINTF("-EDGES: ");
    for(i=0;i<=numNegEdges-1;i++)
    {
		TERMINAL_PRINTF("%9.3f",NegEdges[i]);
		if(i==numNegEdges-1)              // when last data reached put in line return
			TERMINAL_PRINTF(" ");
		else
			TERMINAL_PRINTF(", ");
    }

    // Check that pos edges captured ok
    TERMINAL_PRINTF("+EDGES: ");
    for(i=0;i<=numPosEdges-1;i++)
    {
		TERMINAL_PRINTF("%9.3f",PosEdges[i]);
		if(i==numPosEdges-1)              // when last data reached put in line return
			TERMINAL_PRINTF(" ");
		else
			TERMINAL_PRINTF(", ");
    }
	TERMINAL_PRINTF("|");
}

void reviewEdges()
{
	int 	i;
	float 	LineAverageSize = 0;
	
	LastTrackStatus = CurrentTrackStatus;
	
	/*if ((numPosEdges == 1) && (numNegEdges == 1))	// only one negative and positive edge found (LINE)
	{
		TERMINAL_PRINTF(" SINGLE11 | ");
		LineAverageSize += PosEdges[0] - NegEdges[0];
		
		if ((LineAverageSize >= MIN_LINE_WIDTH) && (LineAverageSize <= MAX_LINE_WIDTH)) // has proper expected width
		{
			CurrentTrackStatus = LineFound;	// report line found!
			UnknownCount = 0;	// reset unknown status count
			
			LastLinePosition[0] = CurrentLinePosition[0];
			CurrentLinePosition[0] = NegEdges[0] + LineAverageSize / 2;		// update line position
		}
	}
	else */if ((numPosEdges > 1 ) && (numNegEdges > 1 ))	// only one negative and positive edge found (LINE)
	{
		TERMINAL_PRINTF(" DOUBLE | ");
		for(i=0;i<=numNegEdges-1;i++)
		{
			LineAverageSize += PosEdges[i] - NegEdges[i];
		}
		LineAverageSize = LineAverageSize / (float)numNegEdges;
		
		if ((LineAverageSize >= MIN_LINE_WIDTH) && (LineAverageSize <= MAX_LINE_WIDTH)) // has proper expected width
		{
			CurrentTrackStatus = LineFound;	// report line found!
			UnknownCount = 0;	// reset unknown status count
			
			for(i=0;i<=numNegEdges-1;i++)
			{
				LastLinePosition[i] = CurrentLinePosition[i];
				CurrentLinePosition[i] = NegEdges[i] + LineAverageSize / 2;		// update line position
			}
		}
	} 
 
	else if ((numPosEdges == 1) && (numNegEdges == 0))	// 1 pos edge found (POSSIBLE LINE)	
	{
		TERMINAL_PRINTF(" SINGLE10 | ");		
		if ((PosEdges[0] <= MAX_LINE_WIDTH) && (LastLinePosError < 0))	// pos edge is within line width of edge of camera (LEFT)
		{
			CurrentTrackStatus = LineFound;	// report line found!
			UnknownCount = 0;	// reset unknown status count
			LastLinePosition[0] = CurrentLinePosition[0];
			CurrentLinePosition[0] = PosEdges[0] - ( MAX_LINE_WIDTH / 2);		// update line position
		//	TERMINAL_PRINTF("*** SINGLE POSEDGE LINE FOUND AT POSITION %9.3f *** \r\n", CurrentLinePosition);
		}
	} 
	else if ((numPosEdges == 0) && (numNegEdges == 1))	// 1 neg edge found (POSSIBLE LINE)	
	{	
		TERMINAL_PRINTF(" SINGLE01 | ");
		if ((NegEdges[0] >= (MAX_LINE_SCAN - MAX_LINE_WIDTH)) && (LastLinePosError > 0))	// neg edge is within line width of edge of camera (RIGHT)
		{
			CurrentTrackStatus = LineFound;		// report line found!
			UnknownCount = 0;	// reset unknown status count
			LastLinePosition[0] = CurrentLinePosition[0];
			CurrentLinePosition[0] = NegEdges[0] + ( MAX_LINE_WIDTH / 2);	// update line position
		//	TERMINAL_PRINTF("*** SINGLE NEGEDGE LINE FOUND AT POSITION %9.3f *** \r\n", CurrentLinePosition);
		} 
	} 
	/*else if ((numPosEdges >= 3) && (numNegEdges >= 3))	// 2 negative and 2 positive edges found (STARTING/FINISH GATE)	
	{	
		for(i=0;i<=numNegEdges-1;i++)
		{
			LineAverageSize += PosEdges[i] - NegEdges[i];
		}
		LineAverageSize = LineAverageSize / (float)numNegEdges;
		if ((LineAverageSize >= MIN_LINE_WIDTH) && (LineAverageSize <= MAX_LINE_WIDTH))
					
		if (startRaceTicker > STARTGATEDELAY) {	// only start counting for starting gate until after delay
			StartGateFoundCount++;
		}
		CurrentTrackStatus = StartGateFound;
		UnknownCount = 0;	// reset unknown status count			
	}*/ 
}

void ActOnTrackStatus()
{
	int  i;
	// Decide what to do next based on current track status
	if (CurrentTrackStatus == LineFound)	// LINE FOUND!
	{
		if (terminalOutput == 1) 
		{
			TERMINAL_PRINTF(" LINEPOS: ");
			for(i=0;i<=numNegEdges-1;i++)
			{
				TERMINAL_PRINTF("%2.0f,", CurrentLinePosition[i]);
			}
			TERMINAL_PRINTF(" ");
		}
	
		// Update steering position 
		//SteeringControl();

		// Apply to servo		
		//Steer();
		
	} 
	else if (CurrentTrackStatus == StartGateFound) 	// STARTING GATE FOUND
	{
		if (terminalOutput == 1) {
			TERMINAL_PRINTF("** STARTING GATE FOUND ** \r\n");
		}
		
		// END RACE!
		if (startGateStop) {
			if (StartGateFoundCount > STARTGATEFOUNDMAX)
			{
				go = false;	// STOP!!
			} 
		}
	}
	TERMINAL_PRINTF("\r\n");
}

/*///////////////////////////////////////////////////////////////////////////////////////////////////
void SteeringControl()
{
	int		i;
	float 	targetPosition = (float)( (NUM_LINE_SCAN / 2) - 0.5);	// target to achieve for line position

	float 	KP;																										// proportional control factor
	float 	KI;																										// integral control factor
	float 	KD;																										// derivative control factor
	
	float 	Pout, Iout, Dout;																			// PID terms
	
	// Calculate error
	// make error to the right positive
	// i.e. if LINE to the right-- then CurrentLinePosError > 0
	//			if LINE to the left -- then CurrentLinePosError < 0
	for(i=0;i<=numNegEdges-1;i++)
	{
		CurrentLinePosError[i] = CurrentLinePosition[i] - targetPosition[i];
	}
	
	// Get absolute error
	if (CurrentLinePosError >= 0) 
		AbsError = CurrentLinePosError;
	else
		AbsError = -1 * CurrentLinePosError;

	// CHOOSE SET OF PID CONTROL PARAMETERS
	switch (CONTROL_METHOD) {
		case 0:
			// Pure proportional control based on range of steering values vs. range of error values
			KP = (float) ( MAX_STEER_RIGHT - MAX_STEER_LEFT ) / ( NUM_LINE_SCAN - (2*FILTER_ENDS) - MIN_LINE_WIDTH );
			KD = 0;
			KI = 0;
			break;
		case 1:
			// Proportional control with 50% bit more oomph --- a bit more aggressive around the bends
			KP = (float) ( MAX_STEER_RIGHT - MAX_STEER_LEFT ) / ( NUM_LINE_SCAN - (2*FILTER_ENDS) - MIN_LINE_WIDTH );
			KP = KP * 1.5;
			KD = 0;
			KI = 0;
			break;
		case 2:	// MANUAL TUNING CASE 1 (use pot to help determine tuning parameters)
			KP = TUNE_KP;
			KI = TUNE_KI;
			KD = TUNE_KD;
		case 3:
			if (AbsError < ABS_ERROR_THRESH) {
				KP = 0.003;	// when relatively straight, keep KP gain low
			} 
			else 
			{
				KP = 0.010;	// when curve begins or off track, increase KP gain
			}
			KI = 0;
			KD = 0;
			
		default:
		break;
	}
	
	* Pseudocode
	previous_error = 0
	integral = 0 
	start:
		error = setpoint - measured_value
		integral = integral + error*dt
		derivative = (error - previous_error)/dt
		output = Kp*error + Ki*integral + Kd*derivative
		previous_error = error
		wait(dt)
		goto start 
	*
	
	
	if (terminalOutput == 3) {
		TERMINAL_PRINTF("KP = %6.4f\r\n", KP);
		TERMINAL_PRINTF("TARGET %6.3f\r\n", targetPosition);
	}
	
	// Update integral of error
	// i.e. if LINE stays to the right, then SumLinePosError increases
	// i.e. if LINE stays to the left, then SumLinePosError decreases
	SumLinePosError = SumLinePosError + ( CurrentLinePosError * DT );

	DerivError = (CurrentLinePosError - LastLinePosError) / DT;
		
	if (terminalOutput == 3) {
		TERMINAL_PRINTF("CURRENT LINE POSITION %9.3f\r\n", CurrentLinePosition);
		TERMINAL_PRINTF("CURRENT LINE POSITION ERROR %9.3f\r\n", CurrentLinePosError);
	}
		
	// SECOND- calculate new servo position
		
	// proportional control term
	Pout = KP * CurrentLinePosError;

	// integral control term
	Iout = KI * SumLinePosError;

	// Derivative control term
	Dout = KD * DerivError;

	if (terminalOutput == 3) {
		TERMINAL_PRINTF("KP = %6.4f\r\n", KP);
		TERMINAL_PRINTF("KI = %6.4f\r\n", KI);
		TERMINAL_PRINTF("KD = %6.4f\r\n", KD);
		TERMINAL_PRINTF("Pout = %6.4f\r\n", Pout);
		TERMINAL_PRINTF("Iout = %6.4f\r\n", Iout);
		TERMINAL_PRINTF("Dout = %6.4f\r\n", Dout);
	}

	// Finally add offset to steering to account for non-centered servo mounting
	// CurrentSteerSetting = Pout + Iout + Dout + ( (float) (MAX_STEER_LEFT + MAX_STEER_RIGHT) / 2 );
	CurrentSteerSetting = Pout + ( (float) (MAX_STEER_LEFT + MAX_STEER_RIGHT) / 2 );
		
	// store for next cycle deriv calculation
	LastLinePosError = CurrentLinePosError;

	// for tuning control algo only
	if (terminalOutput == 1) {
		TERMINAL_PRINTF("*** ******************************** \r\n");
		TERMINAL_PRINTF("*** LINE FOUND AT POSITION %9.3f *** \r\n", CurrentLinePosition);
		TERMINAL_PRINTF("*** ERROR %9.3f *** \r\n", CurrentLinePosError);
		TERMINAL_PRINTF("*** INTEGRAL ERROR %9.3f *** \r\n", SumLinePosError);
		TERMINAL_PRINTF("*** DERIVATIVE ERROR %9.3f *** \r\n", DerivError);
		TERMINAL_PRINTF("*** P STEER SETTING %9.3f *** \r\n", CurrentSteerSetting);
		TERMINAL_PRINTF("*** PI STEER SETTING	%9.3f *** \r\n", (CurrentSteerSetting + Iout));
		TERMINAL_PRINTF("*** ******************************** \r\n");
		wait_ms(1000);
	}
}

void Steer()
{
	// make sure doesn't go beyond steering limits
	if (CurrentSteerSetting > MAX_STEER_RIGHT)
	{ 
		CurrentSteerSetting = MAX_STEER_RIGHT;
	} 
	else if (CurrentSteerSetting < MAX_STEER_LEFT)
	{
		CurrentSteerSetting = MAX_STEER_LEFT;
	}

	if (terminalOutput == 3) 
	{
		TERMINAL_PRINTF("APPLYING SERVO SETTING %5.3f\r\n", CurrentSteerSetting);
	}
	
	TFC_SetServo(0,CurrentSteerSetting);	
}

void SpeedControl()
{
	// Get max speed setting from reading pot0
	// then adjust
	
	float ErrLimit;
	float LeftDriveRatio, RightDriveRatio;
	
	// set maximum speed allowed
	switch (1)
	{
		case 0:
			// read value off pot0
			MaxSpeed = TFC_ReadPot(0);
			break;
		
		case 1:
			if (doRisky)
				MaxSpeed = TUNE_SPEED + 0.1;
			else 
				MaxSpeed = TUNE_SPEED;
			break;
		
		case 2:
			MaxSpeed = SUB_LIGHT_SPEED;
			break;
		
		case 3:
			MaxSpeed = LIGHT_SPEED;
			break;
		
		case 4:
			MaxSpeed = RIDICULOUS_SPEED;			
			break;
		
		case 5:
			MaxSpeed = LUDICROUS_SPEED;			
			break;				
		
		default:
			break;
	}
		
	switch (SPEED_ADJUST)
	{
		case 0:
			// SPEED ADJUST METHOD 0
			// no speed adjust
			LeftDriveRatio = MAX_POWER;
			RightDriveRatio = LeftDriveRatio;
		
		case 1:
			// SPEED ADJUST METHOD 1
			// High speed when error is low, low speed when error is high
			// lower speed when more than third outside of center
			ErrLimit = ((float) RANGE ) * 0.5 * ERR_RATIO * 0.33;
			if (AbsError > ErrLimit) 
			{
				LeftDriveRatio = MIN_POWER;
			} 
			else 
			{
				LeftDriveRatio = MAX_POWER;
			}
			RightDriveRatio = LeftDriveRatio;
			break;
		
		case 2:
			// SPEED ADJUST METHOD 2
			// Have max/min speed adjust proportional to absolute value of line error
			ErrLimit = ((float) RANGE )	* 0.5 * ERR_RATIO; 
			LeftDriveRatio = MAX_POWER - ((MAX_POWER - MIN_POWER) * (AbsError / ErrLimit));
			RightDriveRatio = LeftDriveRatio;
			break;
		
		case 3:
			// SPEED ADJUST METHOD 3
			// have wheel relative speed proportional to absolute value of line error
			ErrLimit = ((float) RANGE )	* 0.5 * ERR_RATIO;
			if (CurrentLinePosError > 0) 
			{					// heading right
				LeftDriveRatio = MAX_POWER;
				RightDriveRatio = (MIN_POWER - MAX_POWER) * (CurrentLinePosError * 2 / ( (float) RANGE ) ) + MAX_POWER;
			} 
			else if (CurrentLinePosError < 0) 
			{		// heading left
				RightDriveRatio = MAX_POWER;
				LeftDriveRatio = (MAX_POWER - MIN_POWER) * (CurrentLinePosError * 2 / ( (float) RANGE ) ) + MAX_POWER;
			} 
			else 
			{
				LeftDriveRatio = MAX_POWER;
				RightDriveRatio = MAX_POWER;
			}
			break;
		
		case 4:
			// SPEED ADJUST METHOD 4
			// have wheel relative speed proportional to absolute value of line error
			// only when above a certain error
			ErrLimit = ((float) RANGE )	* 0.5 * ERR_RATIO * 0.1;
			if (CurrentLinePosError > ErrLimit) 
			{					// heading right
				LeftDriveRatio = MAX_POWER - (MAX_POWER - MIN_POWER) * (CurrentLinePosError * 2 / ( (float) RANGE ) );
				RightDriveRatio = MIN_POWER;
			} 
			else if (CurrentLinePosError < (-1 * ErrLimit)) 
			{		// heading left
				RightDriveRatio = MAX_POWER - (MAX_POWER - MIN_POWER) * (CurrentLinePosError * 2 / ( (float) RANGE ) );
				LeftDriveRatio = MIN_POWER;
			} 
			else 
			{
				LeftDriveRatio = MAX_POWER;
				RightDriveRatio = MAX_POWER;
			}
			break; 
			
		case 5:
			// SPEED ADJUST METHOD 5
			// High speed when error is low, low speed when error is high			
			// lower speed when more than third outside of center
			ErrLimit = ((float) RANGE ) * 0.5 * ERR_RATIO * 0.2;
			if (AbsError > ErrLimit) 
			{
				LeftDriveRatio = MIN_POWER;
			} 
			else 
			{
				LeftDriveRatio = MAX_POWER;
			}
			RightDriveRatio = LeftDriveRatio;
			break;	
			
		case 6:
			// SPEED ADJUST METHOD 6
			// High speed when error is low, low speed when error is high
			// lower speed when more than third outside of center
			if (AbsError > ABS_ERROR_THRESH) 
			{
				LeftDriveRatio = MIN_POWER;
			} 
			else 
			{
				LeftDriveRatio = MAX_POWER;
			}
			RightDriveRatio = LeftDriveRatio;
			break;		
			
		default:
			break;
			
	}
	// TBD-- add speed adjust based on Xaccel sensor!


	// currently no control mechanism as don't have speed sensor	
	CurrentLeftDriveSetting = (float) (LeftDriveRatio / 100) * MaxSpeed;
	CurrentRightDriveSetting = (float) (RightDriveRatio / 100) * MaxSpeed;

	
	if (terminalOutput == 3) 
	{
		TERMINAL_PRINTF("Abs Error: %4.2f\r\n", AbsError);
		TERMINAL_PRINTF("Error Limit: %4.2f\r\n", ErrLimit);
		TERMINAL_PRINTF("MAX SPEED = %5.2f\n", MaxSpeed);
		TERMINAL_PRINTF("Current Left Drive Setting: %5.2f\r\n", CurrentLeftDriveSetting);
		TERMINAL_PRINTF("Current Right Drive Setting: %5.2f\r\n", CurrentRightDriveSetting);
	}
	
	if (1 == 0) 
	{
		TERMINAL_PRINTF("Current Left Drive Setting: %5.2f\r\n", CurrentLeftDriveSetting);
		TERMINAL_PRINTF("Current Right Drive Setting: %5.2f\r\n", CurrentRightDriveSetting);
	}

}

void Drive()
{
	// START!
	// if not going, go when button A is pressed
	if (!go) 
	{
		if(TFC_PUSH_BUTTON_0_PRESSED) 
		{
			go = true;
			UnknownCount = 0;
			StartGateFoundCount = 0;
			startRaceTicker = TFC_Ticker[0];	// keep track of start of race
			logDataIndex = 0;								// reset log data index
		}
	}
	
	// STOP!
	// if going, stop when button A is pressed
	if (go) 
	{							
		if(TFC_PUSH_BUTTON_1_PRESSED) 
		{
				go = false;
				StartGateFoundCount = 0;
		}
	}

	// EMERGENCY STOP!
	// 'kill switch' to prevent crashes off-track
	if (killSwitch) 
	{
		if (UnknownCount > UNKNOWN_COUNT_MAX) 
		{	// if track not found after certain time
			go = false;														// kill engine
			StartGateFoundCount = 0;
		}
	}

// ****************
	
	if (!go) 
	{ // stop!
		TFC_SetMotorPWM(0,0); //Make sure motors are off 
		TFC_HBRIDGE_DISABLE;
	}

	if (go) 
	{	// go!
		TFC_HBRIDGE_ENABLE;
		// motor A = right, motor B = left based on way it is mounted
		TFC_SetMotorPWM(CurrentRightDriveSetting,CurrentLeftDriveSetting);
	}
}*/

void feedbackLights()
{
	switch (CurrentTrackStatus)
	{
		case LineFound11:
			TFC_BAT_LED0_OFF;
			TFC_BAT_LED1_ON;		
			TFC_BAT_LED2_ON;
			TFC_BAT_LED3_OFF;
			break;
			
		case StartGateFound:
			TFC_BAT_LED0_ON;
			TFC_BAT_LED1_OFF;		
			TFC_BAT_LED2_OFF;
			TFC_BAT_LED3_ON;	
			break;
			
		default:
			TFC_BAT_LED0_OFF;
			TFC_BAT_LED1_OFF;		
			TFC_BAT_LED2_OFF;
			TFC_BAT_LED3_OFF;
	}	
}

